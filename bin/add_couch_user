#!/usr/bin/env ruby

gem 'rest-client'
gem 'json'
gem 'highline'

require 'sha1'
require 'restclient'
require 'json'
require 'uri'
require 'highline'

def check_login(username, password, urls)
  urls.map{|url|
    begin
      result = RestClient::Request.execute(:method => :get, :url => url.to_s, :user => username, :password => password)
      json_result = begin
        # should be {"couchdb"=>"Welcome", "version"=>"0.11.0"}
        JSON.parse(result.body)
      rescue JSON::ParserError
        {}
      end
      if json_result["couchdb"] == "Welcome" && json_result["version"] == "0.11.0"
        puts "DBA login in ok for #{url}"
        puts
        true
      else
        puts "Connected to #{url} ok with credentials, but doesn't look like it's a CouchDB server. Check URL and try again"
        false
      end
    rescue RestClient::Unauthorized
      puts "Username/password for #{url} unauthorized. Check credentials and try again"
      false
    rescue SocketError, Errno::ECONNREFUSED
      puts "Could not connect to #{url}. Check URL and try again"
      false
    end
  }.all?
end

def random_password(size = 8)
  chars = (('a'..'z').to_a + ('0'..'9').to_a) - %w(i o 0 1 l 0)
  (1..size).collect{|a| chars[rand(chars.size)] }.join
end

def get_user(username)
end

$highline = HighLine.new

$dba_username = nil
$dba_password = nil
$couch_url = nil

$dba_login_ok = false
until($dba_logged_in) do
  puts
  $dba_username   = $highline.ask("DBA username")
  $dba_password   = $highline.ask("DBA password:"){|question| question.echo = '*'}
  $couch_urls     = $highline.ask("CouchDB URL(s) (comma separated):")
  $couch_urls     = $couch_urls.split(/\s*,\s*/).map{|url| URI.parse(url)}
  $dba_logged_in  = check_login($dba_username, $dba_password, $couch_urls)
end

puts "  Lets add some users..."
$add_more_users = true
while($add_more_users)
  puts
  username  = $highline.ask("New username:")
  
  password  = $highline.ask("New password (leave blank to generate random):")
  if password.empty?
    password = random_password(10)
    puts "  Using generated password #{password}"
  end

  roles     = $highline.ask("Roles (comma separated):")
  
  salt = random_password(10).unpack("H*")[0] # not sure if hex encoding is required for salt, but docs seem to say it is
  password_sha = SHA1.hexdigest(password + salt)

  user = {
    "_id"           => "org.couchdb.user:#{username}",
    "type"          => "user",
    "name"          => username,
    "roles"         => roles.split(/\s*,\s*/),
    "password_sha"  => password_sha,
    "salt"          => salt
  }
  
  $couch_urls.each do |url|
    put_user_url = (url + "_users/#{user["_id"]}").to_s
    puts "  >> #{user.to_json}"
    result = RestClient::Request.execute(:method => :put, :url => put_user_url, :user => $dba_username, :password => $dba_password, :payload => user.to_json)
    puts "  << #{result}"
  
    puts "User #{username} added to #{url}"
  end
  
  $add_more_users = $highline.agree("Add another?")
end